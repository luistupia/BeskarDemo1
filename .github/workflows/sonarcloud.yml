name: SonarCloud
on:  
  pull_request:
    branches: [ "master" ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: true
  
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    environment: Dev
    
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"projectdemo12key_projectdemo" /o:"projectdemo12key" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Check Quality Gate
        run: |
          $response  = Invoke-RestMethod -Uri "https://sonarcloud.io/api/qualitygates/project_status?projectKey=projectdemo12key_projectdemo"          
          Write-Host "Response: $response"
          if ($response.projectStatus.status -ne "OK") {
            Write-Host "Quality Gate failed. Stopping the workflow."            
          }
        env:
          SONAR_TOKEN: ${{ secrets.TOKEN }}
      
